/*
const password = 'iZVilina';

let isAuthUser = false, isAuthing = false;

let isSetWidth = false,
    isSetHeight = false;

let width = 300,
    height = 200;

bot.start((ctx) => {
    const name = ctx?.update?.message?.from?.first_name;

    axios("https://katsap.000webhostapp.com")
    .then(({data}) => {
        console.log("")
        console.log(data)
    })

    ctx.reply(`–ü—Ä–∏–≤—ñ—Ç ${name} ‚ò∫`, {
        reply_markup: {
            inline_keyboard: keyboardStart
        }
    })
})

/*
bot.on('callback_query', async (ctx) => {
    const chatId = ctx?.update?.callback_query?.data;

    console.log(chatId);

    if(chatId === "photos" || chatId === "more"){
        ctx.replyWithPhoto({
            url: `https://picsum.photos/${width}/${height}/?random`,
            filename: 'photo.jpg'
        }, {
            reply_markup: {
                inline_keyboard:  keyboardMore
            }
        })
    }else if(chatId === "settings") {
        isSetWidth = true;
        ctx.reply("–ù–∞–ø–∏—à–∏ —à–∏—Ä–∏–Ω—É –≤ –ø—ñ–∫—Å–µ–ª—è—Ö")
    }else if(chatId === "showRecords") {
        if(isAuthUser){
            ctx.reply("–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é", {
                reply_markup: {
                    inline_keyboard:  keyboardShowRecords
                }
            })
        }else{
            ctx.reply('–©–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ü—ñ –¥–∞–Ω—ñ –≤–∞–º —Ç—Ä–µ–±–∞ –Ω–∞–∂–∞—Ç–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–Ω–∏–∑—É', {
                reply_markup: {
                    inline_keyboard:  keyboardAuth
                }
            });
        }
    }else if(chatId === "message" || chatId === "files" || chatId === "newMessage"){
        if(isAuthUser){
            console.log(`./files/${chatId}.txt`)
            let data = fs.readFileSync(`./files/${chatId}.txt`, "utf8");
            ctx.reply(data);
        }else{
            ctx.reply('–©–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ü—ñ –¥–∞–Ω—ñ –≤–∞–º —Ç—Ä–µ–±–∞ –Ω–∞–∂–∞—Ç–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–Ω–∏–∑—É', {
                reply_markup: {
                    inline_keyboard:  keyboardAuth
                }
            });
        }
    }else if(chatId === "auth"){
        ctx.reply('–ù–∞–ø–∏—à—ñ—Ç—å –ø–∞—Ä–æ–ª—å –∑–Ω–∏–∑—É');
        isAuthing = true;
    }else if(chatId === "forgetLogin"){
        if(isAuthUser){
            isAuthUser = false;
            ctx.reply('–¢–µ–ø–µ—Ä –∫–æ–ª–∏ —Ç–∏ –∑–∞—Ö–æ—á–µ—Ç–µ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Ñ–∞–π–ª–∏ –≤–∞–º –±—É–¥–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–∏—Å–∞—Ç–∏ –ø–∞—Ä–æ–ª—å –∑–Ω–æ–≤—Éü´¢ü´¢ü´¢');
        }else{
            ctx.reply('–¢–∏ —â–µ –Ω–µ –ø–∏—Å–∞–≤ –ø–∞—Ä–æ–ª—å!!!', {
                reply_markup: {
                    inline_keyboard: keyboardStart
                }
            });
        }
    }
});

bot.help((ctx) => {
    ctx.reply('/start \n ...other', {
        reply_markup: {
            inline_keyboard: keyboardStart
        }
      })
})

bot.on('message', (ctx) => {
    if(isSetWidth || isSetHeight){
        const number = +ctx.update.message.text;

        if(!isNaN(number) && number <= 5000 && number > 1){
            if(isSetWidth){
                width = number;
                isSetWidth = false;
                isSetHeight = true;
                ctx.reply("–ù–∞–ø–∏—à–∏ –≤–∏—Å–æ—Ç—É –≤ –ø—ñ–∫—Å–µ–ª—è—Ö");
            }else if(isSetHeight) {
                height = number;
                isSetHeight = false;
                ctx.reply("–î–∞–Ω—ñ –∑–º—ñ–Ω–µ–Ω–Ω—ñ!", {
                    reply_markup: {
                        inline_keyboard:  keyboardStart
                    }
                });
            }
        }else{
            if(isNaN(number)){
                ctx.reply("–í —á–∏—Å–ª—ñ —î –±—É–∫–≤–∞! –ù–∞–ø–∏—à—ñ—Ç—å –∑–Ω–æ–≤—É")
            }else if(!(number <= 5000 && number > 1)){
                ctx.reply("–ß–∏—Å–ª–æ –º–∞–ª–µ –∞–±–æ –≤–µ–ª–∏–∫–µ. Min:1 Max:5000")
            }else{
                ctx.reply("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫")
            }
        }
    }else if(isAuthing){
        console.log(ctx.update.message.text === password);
        if(ctx.update.message.text === password){
            console.log(password);
            isAuthUser = true;
            isAuthing = false;

            ctx.reply("–í—Å–µ –ø—Ä–æ–π—à–ª–æ –¥–æ–±—Ä–µ. –¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Ñ–∞–π–ª–∏", {
                reply_markup: {
                    inline_keyboard:  keyboardShowRecords
                }
            })
        }else{
            ctx.reply("–ü–∞—Ä–æ–ª—å –Ω–µ –≤—ñ—Ä–Ω–∏–π —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
        }
    }else{
        if(/—Ö—É–π|–Ω–∞ —Ö—É–π|–µ–±—É|—î–±—É|—Å—É–∫–∞|–Ω–∞—Ö—É–π|–±–ª–∞–¥—å|–±–ª—è—Ç—å|–ø—ñ–∑–¥–µ—Ü—å|–ø–∏–∑–¥–µ—Ü—å|–±–ª—è|–±–ª—è–¥–∏–Ω–∞|–±–ª—è–¥—ñ–Ω–∞|–±–ª—è–¥–∫–∏|–±–ª—è–¥—Å—å–∫–∏–π|–±–ª—è–¥—Å–∫–∏–π|–±–ª—è—Ö–∞|–≤–∞—Ö—É—ó|–≤ –∞—Ö—É—ó|–≤–∑–¥—Ä—é—á–∏—Ç—å|–≤–∑–¥—Ä—é—á—É|–≤ –ø–∏–∑–¥—É|–≤–∏–±–ª—è–¥–æ–∫|–≤–∏—î–±–∞—Ç—å|–≥–æ–≤–Ω–æ|–≥–∞–≤–Ω—é–∫|–≥–æ–Ω–¥–æ–Ω|–¥–æ–ª–±–æ–π–æ–±|–¥–æ –ø–∏–∑–¥–∏|–¥—Ä–æ—á—É–Ω|—î–±–∞–Ω|–µ–±–∞—Ç—å|—î–±–∞—Ç—å/ig.test(ctx.update.message.text)){
            ctx.reply("–î–∞–ª–±–∞–π–æ–± –∫–æ–Ω—á–µ–Ω–∏–π –Ω–µ –º–∞—Ç—é–∫–∞–π—Å—è!")
        }

        if(ctx.update.message.document){
            const fileData = ctx.update.message;

            files(fileData.document.file_id, fileData.from.first_name, fileData.from.last_name);
        }else{
            const msgData = ctx.update.message;

            text(msgData.text, msgData.from.first_name, msgData.from.last_name);
        }
    }
});

const text = (content, firstName, lastName) => {
    const text = `${(firstName)? firstName + " " : ""}${lastName || ""}: ${content} \r`;
    fs.appendFile('./files/newMessage.txt', text, err => {
        if (err) {
            console.error(err);
        }
    });
}

const files = (img, firstName, lastName) => {
    axios(`https://api.telegram.org/bot${token}/getFile?file_id=${img}`)
    .then(({data}) => {
        const file = `${(firstName)? firstName + " " : ""}${lastName || ""}: https://api.telegram.org/file/bot${token}/${data?.result?.file_path} \r`;

        fs.appendFile(`./files/files.txt`, file, err => {
            if (err) {
                console.error(err);
            }
        });
    })
}
*/